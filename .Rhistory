bag.boston=randomForest(medv~., data=Boston, subset=train, mtry=13, importance=TRUE)
#mtry=13 indicate that all 13 predictors should be considered for each split of the tree - bagging
#importance=TRUE indicate that the importance of predictors should be assessed
bag.boston
?rfNews
rfNews()
#testing
yhat.bag=predict(bag.boston, newdata = Boston[-train,])
plot(yhat.bag, boston.test)
abline(0,1)
mean((yhat.bag-boston.test)^2)
?abline
#Bagging
bag.boston=randomForest(medv~., data=Boston, subset=train, mtry=13, ntree=25, importance=TRUE)
#testing
yhat.bag=predict(bag.boston, newdata = Boston[-train,])
plot(yhat.bag, boston.test)
plot(yhat.bag, boston.test)
abline(0,1) #y=x (intercept=0, slope=1)
mean((yhat.bag-boston.test)^2) #13.47
set.seed(1)
#Bagging
bag.boston=randomForest(medv~., data=Boston, subset=train, mtry=13, ntree=25, importance=TRUE)
#mtry=13 indicate that all 13 predictors should be considered for each split of the tree - bagging
#ntree=number of trees grown
#importance=TRUE indicate that the importance of predictors should be assessed
bag.boston
#testing
yhat.bag=predict(bag.boston, newdata = Boston[-train,])
plot(yhat.bag, boston.test)
abline(0,1) #y=x (intercept=0, slope=1)
mean((yhat.bag-boston.test)^2) #13.47
set.seed(1)
rf.boston=randomForest(medv~., data=Boston, subset = train, mtry=6, importance=TRUE)
yhat.rf=predict(rf.boston, newdata=boston.test)
set.seed(1)
rf.boston=randomForest(medv~., data=Boston, subset = train, mtry=6, importance=TRUE)
yhat.rf=predict(rf.boston, newdata=Boston[-train,])
mean((yhat.rf-boston.test)^2)
importance(rf.boston)
#%IncMSE is based upon the mean decrease of accuracy in predictons on the oob samples when a given variable is excluded from the model
#IncNodePurity is a measure of the total decrease in node impurity that results from splits over that variable, averaged over all trees (regression:training RSS, Classfication:deviance)
varImpPlot(rf.boston)
importance(rf.boston)
library(gbm)
install.packages("gbm")
library(gbm)
set.seed(1)
#Regression problem
boost.boston=gbm(medv~., data=Boston[train,],
distribution="gaussian",
n.trees=5000,
interaction.depth=4)
summary(boost.boston)
par(mfrow=c(1,2))
plot(boost.boston, i="rm")
plot(boost.boston, i="lstat")
yhat.boost=predict(boost.boston, newdata = Boston[-train,], n.trees = 5000)
mean((yhat.boost-boston.test)^2)
#Regression problem
boost.boston=gbm(medv~., data=Boston[train,],
distribution="gaussian", #gaussian for regression, bernoulli for binary classfication
n.trees=5000, #the number of trees we want
interaction.depth=4, #the depth of each tree
shrinkage = 0.2) #lamda shrinkage parameter, default=0.001
#predict on the testing dataset
yhat.boost=predict(boost.boston, newdata = Boston[-train,], n.trees = 5000)
mean((yhat.boost-boston.test)^2)
mean(0.1, 0.15, 0.2, 0.2, 0.55, 0.6, 0.6, 0.65, 0.7, 0.75)
?mean
mean(c(0.1, 0.15, 0.2, 0.2, 0.55, 0.6, 0.6, 0.65, 0.7, 0.75))
library(tree)
library(ISLR)
attach(Carseats)
set.seed(2)
train=sample(1:nrow(Carseats), 200)
Carseats.train=Carseats[train,]
Carseats.test=Carseats[-train,]
library(tree)
tree.carseats=tree(Sales~., data=Carseats, subset = train)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
tree.pred=predict(tree.carseats, newdata = Carseats.test)
mean((tree.pred-Carseats.test$Sales)^2)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
summary(tree.carseats)
#Make predictions on the testing dataset
yhat.tree=predict(tree.carseats, newdata = Carseats.test)
mean((yhat.tree-Carseats.test$Sales)^2)
plot(cv.carseats$size, cv.carseats$dev, type="b")
cv.carseats=cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type="b")
cv.carseats=cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type="b")
tree.min=which.min(cv.carseats$dev)
points(tree.min, cv.carseats$dev[tree.min], col = "red", cex = 2, pch = 20)
which.min(cv.carseats$dev)
cv.carseats
plot(cv.carseats$size, cv.carseats$dev, type="b")
cv.carseats=cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type="b")
which.min(cv.carseats$dev)
library(ISLR)
attach(Carseats)
set.seed(2)
train=sample(1:nrow(Carseats), 200)
Carseats.train=Carseats[train,]
Carseats.test=Carseats[-train,]
library(tree)
tree.carseats=tree(Sales~., data=Carseats, subset = train)
summary(tree.carseats)
#Plot the tree
plot(tree.carseats)
text(tree.carseats, pretty = 0)
#Make predictions on the testing dataset
yhat.tree=predict(tree.carseats, newdata = Carseats.test)
mean((yhat.tree-Carseats.test$Sales)^2)
cv.carseats=cv.tree(tree.carseats)
cv.carseats
plot(cv.carseats$size, cv.carseats$dev, type="b")
which.min(cv.carseats$dev)
points(tree.min, cv.carseats$dev[tree.min], col = "red", cex = 2, pch = 20)
cv.carseats=cv.tree(tree.carseats)
cv.carseats
plot(cv.carseats$size, cv.carseats$dev, type="b")
tree.min=which.min(cv.carseats$dev)
points(tree.min, cv.carseats$dev[tree.min], col = "red", cex = 2, pch = 20)
tree.min
cv.carseats
plot(cv.carseats$size, cv.carseats$dev, type="b")
cv.carseats
plot(cv.carseats$size, cv.carseats$dev, type="b")
cv.carseats
plot(cv.carseats$size, cv.carseats$dev, type="b")
cv.carseats
cv.carseats=cv.tree(tree.carseats)
cv.carseats
plot(cv.carseats$size, cv.carseats$dev, type="b")
tree.min=which.min(cv.carseats$dev)
points(cv.carseats$size[tree.min], cv.carseats$dev[tree.min], col = "red", cex = 2, pch = 20)
tree.min
cv.carseats=cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type="b")
dev.min.index=which.min(cv.carseats$dev)
points(cv.carseats$size[dev.min.index], cv.carseats$dev[dev.min.index], col = "red", cex = 2, pch = 20)
cv.carseats=cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type="b")
dev.min.index=which.min(cv.carseats$dev)
points(cv.carseats$size[dev.min.index], cv.carseats$dev[dev.min.index], col = "red", cex = 2, pch = 20)
library(ISLR)
attach(Carseats)
set.seed(2)
train=sample(1:nrow(Carseats), 200)
Carseats.train=Carseats[train,]
Carseats.test=Carseats[-train,]
library(ISLR)
attach(Carseats)
set.seed(2)
train=sample(1:nrow(Carseats), 200)
Carseats.train=Carseats[train,]
Carseats.test=Carseats[-train,]
library(tree)
tree.carseats=tree(Sales~., data=Carseats, subset = train)
summary(tree.carseats)
#Plot the tree
plot(tree.carseats)
text(tree.carseats, pretty = 0)
cv.carseats=cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type="b")
dev.min.index=which.min(cv.carseats$dev)
points(cv.carseats$size[dev.min.index], cv.carseats$dev[dev.min.index], col = "red", cex = 2, pch = 20)
cv.carseats=cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type="b")
dev.min.index=which.min(cv.carseats$dev)
points(cv.carseats$size[dev.min.index], cv.carseats$dev[dev.min.index], col = "red", cex = 2, pch = 20)
set.seed(2)
cv.carseats=cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type="b")
dev.min.index=which.min(cv.carseats$dev)
points(cv.carseats$size[dev.min.index], cv.carseats$dev[dev.min.index], col = "red", cex = 2, pch = 20)
set.seed(2)
cv.carseats=cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type="b")
dev.min.index=which.min(cv.carseats$dev)
points(cv.carseats$size[dev.min.index], cv.carseats$dev[dev.min.index], col = "red", cex = 2, pch = 20)
set.seed(2)
cv.carseats=cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type="b")
dev.min.index=which.min(cv.carseats$dev)
points(cv.carseats$size[dev.min.index], cv.carseats$dev[dev.min.index], col = "red", cex = 2, pch = 20)
set.seed(2)
cv.carseats=cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type="b")
dev.min.index=which.min(cv.carseats$dev)
points(cv.carseats$size[dev.min.index], cv.carseats$dev[dev.min.index], col = "red", cex = 2, pch = 20)
prune.carseats=prune.tree(tree.carseats, best=13)
plot(prune.boston)
prune.carseats=prune.tree(tree.carseats, best=13)
plot(prune.carseats)
text(prune.carseats, pretty=0)
prune.carseats=prune.tree(tree.carseats, best=13)
plot(prune.carseats)
text(prune.carseats, pretty=0)
yhat.prune=predict(tree.carseats, newdata = Carseats.test)
mean((yhat.prune-Carseats.test$Sales)^2)
prune.carseats=prune.tree(tree.carseats, best=13)
plot(prune.carseats)
text(prune.carseats, pretty=0)
yhat.prune=predict(tree.carseats, newdata = Carseats.test)
mean((yhat.prune-Carseats.test$Sales)^2)
prune.carseats=prune.tree(tree.carseats, best=13)
plot(prune.carseats)
text(prune.carseats, pretty=0)
yhat.prune=predict(tree.carseats, newdata = Carseats.test)
mean((yhat.prune-Carseats.test$Sales)^2)
str(Carseats)
library(randomForest)
set.seed(2)
bag.carseats=randomForest(Sales.~, data=Carseats, subset=train, mtry=10, ntree=500, importance=TRUE)
library(randomForest)
set.seed(2)
bag.carseats=randomForest(Sales~., data=Carseats, subset=train, mtry=10, ntree=500, importance=TRUE)
yhat.bag=predict(bag.carseats, newdata = Carseats.test)
mean((yhat.bag-Carseats.test$Sales)^2)
importance(bag.carseats)
importance(bag.carseats)
varImpPlot(rf.boston)
importance(bag.carseats)
varImpPlot(bag.carseats)
set.seed(2)
rf.carseats=randomForest(Sales~., data=Carseats, subset = train, mtry=3, ntree = 500, importance = TRUE)
yhat.rf=predict(rf.carseats, newdata=Carseats.test)
mean((yhat.rf-Carseats.test$Sales)^2)
importance(bag.carseats)
varImpPlot(bag.carseats)
importance(rf.carseats)
varImpPlot(rf.carseats)
#Plot the tree
plot(tree.carseats, cex=3)
plot(tree.carseats)
text(tree.carseats, pretty = 0, cex=3)
plot(tree.carseats)
text(tree.carseats, pretty = 0, cex=0.1)
plot(tree.carseats)
text(tree.carseats, pretty = 0, cex=0.5)
plot(tree.carseats)
text(tree.carseats, pretty = 0, cex=0.8)
plot(tree.carseats)
text(tree.carseats, pretty = 0, cex=0.7)
plot(tree.carseats)
text(tree.carseats, pretty = 0, cex=0.6)
plot(tree.carseats)
text(tree.carseats, pretty = 0, cex=0.5)
plot(prune.carseats)
text(prune.carseats, pretty=0, cex=0.5)
seq(10, -3, length = 200)
rnorm(4,0,0.5)
?rnorm
rnorm(10,0,0.5)
library(readxl)
library(tidyverse)
library(stringr)
library(lubridate)
course_enroll151617=read_excel("Marshall_Course_Enrollment_1516_1617.xlsx")
colnames(course_enroll151617)=str_replace_all(colnames(course_enroll151617)," ", "")
course_enroll151617$FirstDays=as.factor(course_enroll151617$FirstDays)
course_enroll151617$Term=as.factor(course_enroll151617$Term)
levels(course_enroll151617$Term)=c("2015Fall","2016Spring","2016Summer","2016Fall","2017Spring","2017Summer")
#plot distribution for dow
course_enroll151617%>%
filter(!is.na(RegCount))%>%
group_by(RegCount)%>%
summarise(count=n())%>%
ggplot(aes(x=reorder(RegCount,-count), y=count))+
geom_histogram(stat="identity")+
labs(x="Pattern", y="Count", title="Distribution of Different Class Capacity")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))
course_enroll151617%>%
filter(!is.na(FirstDays))%>%
group_by(FirstDays)%>%
summarise(count=n())%>%
ggplot(aes(x=reorder(FirstDays,-count), y=count))+
geom_histogram(stat="identity")+
labs(x="Pattern", y="Count", title="Distribution of Different Course Patterns")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))
course_enroll151617%>%
filter(!is.na(RegCount))%>%
group_by(RegCount)%>%
summarise(count=n())%>%
ggplot(aes(x=reorder(RegCount,-count), y=count))+
geom_histogram(stat="identity")+
labs(x="Pattern", y="Count", title="Distribution of Different Class Capacity")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))
course_enroll151617%>%
filter(!is.na(RegCount))%>%
group_by(RegCount)%>%
summarise(count=n())%>%
head(30)%>%
ggplot(aes(x=reorder(RegCount,-count), y=count))+
geom_histogram(stat="identity")+
labs(x="Pattern", y="Count", title="Distribution of Different Class Capacity")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))
course_enroll151617%>%
filter(!is.na(RegCount))%>%
group_by(RegCount)%>%
summarise(count=n())%>%
head(30)%>%
ggplot(aes(x=RegCount, y=count))+
geom_histogram(stat="identity")+
labs(x="Pattern", y="Count", title="Distribution of Different Class Capacity")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))
course_enroll151617%>%
filter(!is.na(RegCount))%>%
group_by(RegCount)%>%
summarise(count=n())%>%
ggplot(aes(x=RegCount, y=count))+
geom_histogram(stat="identity")+
labs(x="Pattern", y="Count", title="Distribution of Different Class Capacity")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))
course_enroll151617%>%
filter(!is.na(RegCount))%>%
group_by(RegCount)%>%
summarise(count=n())%>%
ggplot(aes(x=RegCount, y=count))+
geom_histogram(stat="identity")+
labs(x="Pattern", y="Count", title="Distribution of Different Class Capacity")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))+
xlim(0,80)
course_enroll151617%>%
filter(!is.na(RegCount))%>%
group_by(RegCount)%>%
summarise(count=n())%>%
ggplot(aes(x=RegCount, y=count))+
geom_histogram(stat="identity")+
labs(x="Pattern", y="Count", title="Distribution of Different Class Capacity")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))+
xlim(0,70)
str(course_enroll151617)
course_enroll151617%>%
filter(FirstDays %in% c('M','T','W','H','F','MW','TH')&
FirstRoom!="ONLINE")%>%
select(Course, FirstBeginTime, FirstEndTime, FirstDays, Term)%>%
mutate(time_span=as.numeric(difftime(FirstEndTime,FirstBeginTime,unit="mins")),
pattern=nchar(as.character(FirstDays)))%>%
group_by(time_span)%>%
summarise(count=n())%>%
ggplot(aes(x=time_span, y=count))+
geom_histogram(stat="identity")+
labs(x="Pattern", y="Count", title="Distribution of Different Time Span")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))
course_enroll151617%>%
filter(FirstDays %in% c('M','T','W','H','F','MW','TH')&
FirstRoom!="ONLINE")%>%
select(Course, FirstBeginTime, FirstEndTime, FirstDays, Term)%>%
mutate(time_span=as.numeric(difftime(FirstEndTime,FirstBeginTime,unit="mins")),
pattern=nchar(as.character(FirstDays)))%>%
group_by(time_span)%>%
summarise(count=n())%>%
ggplot(aes(x=time_span/60, y=count))+
geom_histogram(stat="identity")+
labs(x="Pattern", y="Count", title="Distribution of Different Time Span")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))
course_enroll151617%>%
filter(FirstDays %in% c('M','T','W','H','F','MW','TH')&
FirstRoom!="ONLINE")%>%
select(Course, FirstBeginTime, FirstEndTime, FirstDays, Term)%>%
mutate(time_span=as.numeric(difftime(FirstEndTime,FirstBeginTime,unit="mins")),
pattern=nchar(as.character(FirstDays)))%>%
group_by(time_span)%>%
summarise(count=n())%>%
ggplot(aes(x=time_span/60, y=count))+
geom_histogram(stat="identity")+
labs(x="Pattern", y="Count", title="Distribution of Different Time Span")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))+
xlim(0,5)
course_enroll151617%>%
filter(!is.na(RegCount))%>%
group_by(RegCount)%>%
summarise(count=n())%>%
ggplot(aes(x=RegCount, y=count))+
geom_histogram(stat="identity")+
labs(x="Pattern", y="Count", title="Distribution of Different Class Capacity")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))+
xlim(0,70)
course_enroll151617%>%
filter(!is.na(RegCount))%>%
group_by(RegCount)%>%
summarise(count=n())%>%
ggplot(aes(x=RegCount, y=count))+
geom_histogram(stat="identity")+
labs(x="RegCount", y="Count", title="Distribution of Different Class Capacity")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))+
xlim(0,70)
course_enroll151617%>%
filter(!is.na(RegCount))%>%
group_by(RegCount)%>%
summarise(count=n())%>%
ggplot(aes(x=RegCount, y=count))+
geom_histogram(stat="identity")+
labs(x="RegCount", y="Count", title="Distribution of Different Class Capacity")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))
course_enroll151617%>%
filter(!is.na(RegCount))%>%
group_by(RegCount)%>%
summarise(count=n())%>%
ggplot(aes(x=RegCount, y=count))+
geom_histogram(stat="identity")+
labs(x="RegCount", y="Count", title="Distribution of Different Class Capacity")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))+
xlim(0,70)
course_enroll151617%>%
filter(!is.na(RegCount))%>%
group_by(RegCount)%>%
summarise(count=n())%>%
ggplot(aes(x=RegCount, y=count))+
geom_histogram(stat="identity")+
labs(x="RegCount", y="Count", title="Distribution of Different Class Capacity")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))
course_enroll151617%>%
filter(!is.na(RegCount))%>%
group_by(RegCount)%>%
summarise(count=n())%>%
ggplot(aes(x=RegCount, y=count))+
geom_histogram(stat="identity")+
labs(x="RegCount", y="Count", title="Distribution of Different Class Capacity")+
theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5))+
xlim(0,100)
# Loading necessary packages and datasets
library(readr)
library(readxl)
library(stringr)
library(lubridate)
library(ggplot2)
library(data.table)
library(plyr)
library(dplyr)
setwd("C:/Users/ctrintern/Desktop/Joanna's folder/other")
data = read_excel("Case #2 - USC Recruiting Strategy Case - DATA - sept 2018.xlsx")
codebook = read_excel("CASE #2 - Recruiting Strategy CodeBook9.5.18.xlsx")
###############################################################################################################################
# --------------------------------------------- PART 1: Dataset Overview ------------------------------------------------------
###############################################################################################################################
# Replacing all spaces in the column names to underline "_"
colnames(data) = gsub(" ", "_", colnames(data))
codebook$Field = gsub(" ", "_", codebook$Field)
# Creating summary statistics table
summary = data.frame(Variable = colnames(data))
summary$DataType = sapply(data, class)                             # Creating column "DataType" to indicate all variables' data type
summary$NAnum = sapply(data, function(x){sum(is.na(x))})           # Creating column "NAnum" to count the number of NAs in each variable
summary$uniqueNum = sapply(data, function(x){length(unique(x))})   # Creating column "uniqueNum" to count the number of unique values in each variable
summary$min = sapply(data, min, na.rm = TRUE)                      # Creating column "min" to indicate all variables' minimum value (only meaningful for numeric values)
summary$max = sapply(data, max, na.rm = TRUE)                      # Creating column "max" to indicate all variables' maximum value (only meaningful for numeric values)
summary$mean = sapply(data, mean, na.rm = TRUE)                    # Creating column "meab" to indicate all variables' mean (only meaningful for numeric values)
# Join variable definitions in codebook to summary statistics table
summary = merge(summary, codebook, by.x = "Variable", by.y = "Field")
# List 5 examples of the field values for each variable
example = sapply(data, function(x){sort(unique(x)[1:5])})         # extract and sort unique values for each column
example = ldply(example, rbind)                                   # transform the list into a dataframe
colnames(example) = c("Variable", "e1", "e2", "e3", "e4", "e5")   # rename the columns
example$examples = apply(example[,-1], 1, paste, collapse = "//") # paste all the 5 examples for each variable into one column
summary = merge(summary, example[, c(1, 7)], by = "Variable")     # join the examples to the summary table
# Write the summary statistics into csv file
fwrite(summary, "summary.csv")
###############################################################################################################################
# ------------------------------------------- PART 1: Column-by-column Cleaning -----------------------------------------------
###############################################################################################################################
# There are altogether 81 variables in the dataset
# We will go over each column one by one to understand its details and then decide the corresponding cleaning method
sum(!is.na(data$sip_comments))
data$sip_comments[data$opportunity_id == "006a000001BhaUvAAJ"]
setwd("~/Documents/USC/GITHUB/USC_Recruiting_Analytics")
data = read_excel("Case #2 - USC Recruiting Strategy Case - DATA - sept 2018.xlsx")
codebook = read_excel("CASE #2 - Recruiting Strategy CodeBook9.5.18.xlsx")
# Replacing all spaces in the column names to underline "_"
colnames(data) = gsub(" ", "_", colnames(data))
codebook$Field = gsub(" ", "_", codebook$Field)
# Creating summary statistics table
summary = data.frame(Variable = colnames(data))
summary$DataType = sapply(data, class)                             # Creating column "DataType" to indicate all variables' data type
summary$NAnum = sapply(data, function(x){sum(is.na(x))})           # Creating column "NAnum" to count the number of NAs in each variable
summary$uniqueNum = sapply(data, function(x){length(unique(x))})   # Creating column "uniqueNum" to count the number of unique values in each variable
summary$min = sapply(data, min, na.rm = TRUE)                      # Creating column "min" to indicate all variables' minimum value (only meaningful for numeric values)
summary$max = sapply(data, max, na.rm = TRUE)                      # Creating column "max" to indicate all variables' maximum value (only meaningful for numeric values)
summary$mean = sapply(data, mean, na.rm = TRUE)                    # Creating column "meab" to indicate all variables' mean (only meaningful for numeric values)
# Join variable definitions in codebook to summary statistics table
summary = merge(summary, codebook, by.x = "Variable", by.y = "Field")
# List 5 examples of the field values for each variable
example = sapply(data, function(x){sort(unique(x)[1:5])})         # extract and sort unique values for each column
example = ldply(example, rbind)                                   # transform the list into a dataframe
colnames(example) = c("Variable", "e1", "e2", "e3", "e4", "e5")   # rename the columns
example$examples = apply(example[,-1], 1, paste, collapse = "//") # paste all the 5 examples for each variable into one column
summary = merge(summary, example[, c(1, 7)], by = "Variable")     # join the examples to the summary table
# Write the summary statistics into csv file
fwrite(summary, "summary.csv")
